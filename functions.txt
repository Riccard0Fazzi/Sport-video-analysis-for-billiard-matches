void adaptiveColorBasedSegmentation(const Mat& img, Mat& dest, double window_ratio) {

// Calculate the window size as function of the image size
    int window_size = static_cast<int>(std::round(static_cast<double>(std::max(img.rows,img.cols)) / window_ratio));


	Mat temp = img.clone();
	Mat hsv_img_mean_shift;
    cvtColor(temp, hsv_img_mean_shift, COLOR_BGR2HSV_FULL);
    std::vector<Mat> img_channels_mean_shift;
    split(hsv_img_mean_shift, img_channels_mean_shift);


	Scalar mh_F, sh_F;
    meanStdDev(img_channels_mean_shift[0], mh_F, sh_F);

    Scalar ms_F, ss_F;
    meanStdDev(img_channels_mean_shift[1], ms_F, ss_F);

    Scalar mv_F, sv_F;
    meanStdDev(img_channels_mean_shift[2], mv_F, sv_F);



	double spatial_window_radius = (0.001*window_size); 
	double color_window_radius =  sh_F[0];

	cvtColor(temp,temp,COLOR_BGR2Lab);
	pyrMeanShiftFiltering(temp,temp,spatial_window_radius ,color_window_radius );
	cvtColor(temp,temp,COLOR_Lab2BGR);
	//namedWindow("MeanShift");
	//imshow("MeanShift",temp);
	//waitKey(0);




    // Convert the image to HSV color space
    Mat hsv_img;
    cvtColor(temp, hsv_img, COLOR_BGR2HSV_FULL);
    std::vector<Mat> img_channels;
    split(hsv_img, img_channels);



    // Compute the mean and standard deviation for each channel
    Scalar mh, sh;
    meanStdDev(img_channels[0], mh, sh);


    Scalar ms, ss;
    meanStdDev(img_channels[1], ms, ss);

    Scalar mv, sv;
    meanStdDev(img_channels[2], mv, sv);


    

    // Initialize the destination imageq
    dest = Mat::zeros(img.size(), img.type());

    // Determine the most common color in the window region by histogram evaluation
    Vec3b field_color;
    mostCommonColor(img,field_color);
    // Iterate over the image with non-overlapping windows
	
    for (int y = 0; y < img.rows; y += window_size) {
        for (int x = 0; x < img.cols; x += window_size) {

            // Define the window region, ensuring it doesn't exceed the image bounds
            int window_width = std::min(window_size, img.cols - x);
            int window_height = std::min(window_size, img.rows - y);
            Rect window(x, y, window_width, window_height);
            Mat window_region = hsv_img(window);

            // Determine the most common color in the window region by histogram evaluation
            Vec3b most_common_color;
            mostCommonColor(window_region,most_common_color);




            std::vector<Mat> hsv_channels;
            split(window_region, hsv_channels);


            // Compute the mean and standard deviation for each channel
            Scalar mean_hue, stddev_hue;
            meanStdDev(hsv_channels[0], mean_hue, stddev_hue);
            Scalar nmh = mean_hue/mh;
            Scalar nsh = stddev_hue/sh;


            Scalar mean_saturation, stddev_saturation;
            meanStdDev(hsv_channels[1], mean_saturation, stddev_saturation);
            Scalar nms = mean_saturation/ms;
            Scalar nss = stddev_saturation/ss;

            Scalar mean_value, stddev_value;
            meanStdDev(hsv_channels[2], mean_value, stddev_value);
            Scalar nmv = mean_value/mv;
            Scalar nsv = stddev_value/sv;


            // Set thresholds based on mean and stddev

            // Calculate lower and upper bounds directly based on standard deviations
            std::vector<int> hsv_thresholds(6);

            // GENERAL STD variation
            double lower_coeff = 1.2; // 0.8
            double higher_coeff = 0.9; // 1.2

            double lower_weight[3];
            double higher_weight[3];


			// Hue settings for lower/upper bound differences
			if(most_common_color[0] > mean_hue[0] || mh[0]<120)
			{

				lower_weight[0]= 0.8;
				higher_weight[0] = 1.2;
			} else
			{
				higher_weight[0] = 0.8;
				lower_weight[0] = 1.2;
			}
			if(most_common_color[1] > mean_hue[1])
			{
				higher_weight[1] = 0.8;
				lower_weight[1] = 1.2;
			} else
			{
				higher_weight[1] = 1.2;
				lower_weight[1] = 0.8;
			}
			if(most_common_color[2] > mean_hue[2])
			{
				higher_weight[2] = 0.8;
				lower_weight[2] = 1.2;
			} else
			{
				higher_weight[2] = 1.2;
				lower_weight[2] = 0.8;
			}
            // HUE

            // STD condition
            double h_cond;
            if(stddev_hue[0]>sh[0]){
                h_cond = sh[0]/stddev_hue[0];
            }
            else{
                h_cond = stddev_hue[0]/sh[0];
            }

            // THRESHOLD
            double  h_t;
            if(mean_hue[0]>mh[0]){
                h_t = 10*mh[0]/mean_hue[0];
            }
            else{
                h_t = 10*mean_hue[0]/mh[0];
            }

                     // 0.3 && h_t/10 < 0.5)
            if(h_cond < 0.3) // case 1: non-uniform window only in Hue
            {
			                hsv_thresholds[0] = static_cast<int>(lower_weight[0]*lower_coeff*h_t); // Lower bound for hue
                hsv_thresholds[1] = static_cast<int>(higher_weight[0]*lower_coeff*h_t); // Upper bound for hue



            } else {

                hsv_thresholds[0] = static_cast<int>(lower_weight[0]*higher_coeff*h_t); // Lower bound for hue
                hsv_thresholds[1] = static_cast<int>(higher_weight[0]*higher_coeff*h_t);  // Upper bound for hue
            }

            // SATURATION

            // STD condition
            double s_cond;
            if(stddev_saturation[0]>ss[0]){
                s_cond = ss[0]/stddev_saturation[0];
            }
            else{
                s_cond = stddev_saturation[0]/ss[0];
            }

            // THRESHOLD
            double  s_t;
            if(mean_saturation[0]>ms[0]){
                s_t = 60*ms[0]/mean_saturation[0];
            }
            else{
                s_t = 60*mean_saturation[0]/ms[0];
            }

			       // 0.3
            if(s_cond<0.3)
            {
	                hsv_thresholds[2] = static_cast<int>(1000); // Lower bound for saturation
                hsv_thresholds[3] = static_cast<int>(1000); // Upper bound for saturation


            } else {
			
                hsv_thresholds[2] = static_cast<int>(lower_weight[1]*higher_coeff*s_t);  // Lower bound for saturation
                hsv_thresholds[3] = static_cast<int>(higher_weight[1]*higher_coeff*s_t);  // Upper bound for saturation
            }



            //VALUE

            // STD condition
            double v_cond;
            if(stddev_value[0]>sv[0]){
                v_cond = sv[0]/stddev_value[0];
            }
            else{
                v_cond = stddev_value[0]/sv[0];
            }
            // THRESHOLD
            double  v_t;
            if(mean_value[0]>mv[0]){
                v_t = 60*mv[0]/mean_value[0]; // 60
            }
            else{
                v_t = 60*mean_value[0]/mv[0]; // 60
            }
				   // 0.6
            if(v_cond<0.4)
            {
			                hsv_thresholds[4] = static_cast<int>(lower_weight[2]*lower_coeff*v_t); // Lower bound for value
                hsv_thresholds[5] = static_cast<int>(higher_weight[2]*lower_coeff*v_t); // Upper bound for value
				


            } else {
					if(mh[0]<120 && h_cond > 0.8 && v_t/60 > 0.8)
					higher_coeff = 1000;
					else higher_coeff = 1;
                hsv_thresholds[4] = static_cast<int>(lower_weight[2]*higher_coeff*v_t);  // Lower bound for value
                hsv_thresholds[5] = static_cast<int>(higher_weight[2]*higher_coeff*v_t);  // Upper bound for value
            }
            // Create a mask for the most common color in the window region
            Scalar lower_bound(
                    std::max(most_common_color[0] - hsv_thresholds[0], 0),
                    std::max(most_common_color[1] - hsv_thresholds[2], 0),
                    std::max(most_common_color[2] - hsv_thresholds[4], 0)
            );
            Scalar upper_bound(
                    std::min(most_common_color[0] + hsv_thresholds[1], 180),
                    std::min(most_common_color[1] + hsv_thresholds[3], 255),
                    std::min(most_common_color[2] + hsv_thresholds[5], 255)
            );
            Mat mask;
            inRange(window_region, lower_bound, upper_bound, mask);



            // Invert the mask to remove the most common color
            Mat inverted_mask;
            bitwise_not(mask,inverted_mask);



            // Apply the mask to the corresponding region in the destination image
            Mat dest_region = dest(window);
            img(window).copyTo(dest_region,inverted_mask);
        }
    }
}


void ballDetection(const Mat& img, std::vector<Vec3f>& circles) {
    // Bilateral Filter [d:7, sigmaColor:60, sigmaSpace:300]
    Mat filtered_img;
    bilateralFilter(img,filtered_img,7,60,300);

    // Contrast stretching used to enhance dark regions, and hence obtain a correct segmentation
    contrastStretching(filtered_img,filtered_img);

    // Color-based segmentation applied to obtain the balls mask
    Mat segmented_img;
    double window_ratio = 11.5; //14.6;
    //std::vector<int> HSV_thresholds = {8, 200, 70};
    adaptiveColorBasedSegmentation(filtered_img,segmented_img,window_ratio);

	// Here the image is converted into a binary one
	// ideally only the billiard balls should be highlighted
    // Conversion to gray-scale and binary thresholding of the balls mask
    cvtColor(segmented_img,segmented_img,COLOR_BGR2GRAY);
    Mat binary_segmented_img;
    threshold(segmented_img,binary_segmented_img,0,255,THRESH_BINARY);

    // Morphological operators (CLOSING + OPENING), used to make more even the balls blobs
	// closing: filling gaps & connect adjacent objects
    morphologyEx(binary_segmented_img,binary_segmented_img,MORPH_CLOSE,getStructuringElement(MORPH_ELLIPSE,Size(3, 3)),
                 Point(-1, -1),1); // 1
	// opening: brake narrow connection between objects
    morphologyEx(binary_segmented_img,binary_segmented_img,MORPH_OPEN,getStructuringElement(MORPH_ELLIPSE,Size(3,3)),
                 Point(-1,-1),3); // 3
    morphologyEx(binary_segmented_img,binary_segmented_img,MORPH_OPEN,getStructuringElement(MORPH_ELLIPSE,Size(3,3)),
                 Point(-1,-1),1); // 3

    cv::namedWindow("Before_Morph");
    cv::imshow("Before_Morph",binary_segmented_img);
    //cv::waitKey(0);
    // Hough circles transformation for circle detection on the binary mask
    double min_distance_between_circles = static_cast<double>(binary_segmented_img.cols) / 40; // 40
    int thresh1 = 300;
    int thresh2 = 6;
    double min_radius = static_cast<double>(std::max(binary_segmented_img.cols, binary_segmented_img.rows)) / 115;
    double max_radius = static_cast<double>(std::max(binary_segmented_img.cols, binary_segmented_img.rows)) / 35;
    std::vector<Vec3f> detected_circles;
    HoughCircles(binary_segmented_img,circles,HOUGH_GRADIENT,1,min_distance_between_circles,thresh1,thresh2,
                 min_radius, max_radius);
}

